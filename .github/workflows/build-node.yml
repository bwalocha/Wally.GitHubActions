on:
  workflow_call:
    inputs:
      project:
        description: 'Project to build'
        required: true
        type: string

jobs:
  build:
    name: ${{ inputs.project }}
    runs-on: ubuntu-latest

    steps:
    - name: Debug
      run: |
        echo "The job was triggered by a '${{ github.event_name }}' event"
        echo "This job is now running on a '${{ runner.os }}' server hoster by GitHub"
        echo "The name of branch is '${{ github.ref }}' and the repository is '${{ github.repository }}'"

    - uses: actions/checkout@v2

    - name: Debug
      run: |
        echo "The repository has been copied to the '${{ github.workspace }}' path on the runner"
        ls ${{ github.workspace }}

    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('src/**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '18.x'
        registry-url: https://registry.npmjs.org

    - name: Debug
      run: |
        echo "The preinstalled tools are located in '${{ runner.tool_cache }}' path on the runner"
        ls ${{ runner.tool_cache }}

    - name: List the state of node modules
      if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      continue-on-error: true
      run: npm list

    - name: Install dependencies
      run: npm --prefix ./src/${{ inputs.project }} ci --cache ~/.npm --prefer-offline

    - name: Build
      run: npm --prefix ./src/${{ inputs.project }} run build --production --if-present

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.project }}
        path: ./src/${{ inputs.project }}/dist

    - name: Debug
      run: |
        echo "The job's status is '${{ job.status }}'"
